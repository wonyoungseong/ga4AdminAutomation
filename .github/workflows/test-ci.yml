name: Test CI Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-asyncio pytest-cov pytest-mock
        pip install fastapi sqlalchemy pydantic httpx
        pip install bcrypt python-jose[cryptography]
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Create test database
      run: |
        python -c "
        import sqlite3
        conn = sqlite3.connect('test_ga4_admin.db')
        conn.close()
        "
    
    - name: Run unit tests with coverage
      run: |
        pytest src/backend/tests/unit/ \
          --cov=src/backend/application/ \
          --cov=src/backend/core/ \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --tb=short \
          -v
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  integration-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_ga4_admin
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-asyncio pytest-cov
        pip install fastapi sqlalchemy pydantic httpx
        pip install psycopg2-binary
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Set up test environment
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_ga4_admin
        ENVIRONMENT: test
      run: |
        export DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_ga4_admin
        export ENVIRONMENT=test
    
    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_ga4_admin
        ENVIRONMENT: test
      run: |
        pytest src/backend/tests/integration/ \
          --tb=short \
          -v \
          --maxfail=5

  api-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-asyncio
        pip install fastapi sqlalchemy pydantic httpx uvicorn
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Start test server
      run: |
        cd src/backend
        python -m uvicorn main:app --host 0.0.0.0 --port 8000 &
        sleep 10
      env:
        ENVIRONMENT: test
        DATABASE_URL: sqlite:///test_ga4_admin.db
    
    - name: Run API tests
      run: |
        pytest src/backend/tests/api/ \
          --tb=short \
          -v \
          --maxfail=3
      env:
        API_BASE_URL: http://localhost:8000

  security-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install security testing tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        pip install pytest pytest-asyncio
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Run security linting with bandit
      run: |
        bandit -r src/backend/ -f json -o bandit-report.json || true
        bandit -r src/backend/ --severity-level medium
    
    - name: Check for known vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
        safety check
    
    - name: Run security-focused tests
      run: |
        pytest src/backend/tests/unit/test_permission_edge_cases.py::TestPermissionEdgeCases \
          -k "security or permission or auth" \
          --tb=short \
          -v

  e2e-tests:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-asyncio
        pip install playwright
        pip install fastapi sqlalchemy pydantic httpx uvicorn
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Install Playwright browsers
      run: playwright install chromium
    
    - name: Start application
      run: |
        cd src/backend
        python -m uvicorn main:app --host 0.0.0.0 --port 8000 &
        sleep 15
      env:
        ENVIRONMENT: test
        DATABASE_URL: sqlite:///test_ga4_admin.db
    
    - name: Run E2E tests
      run: |
        pytest src/backend/tests/e2e/ \
          --tb=short \
          -v \
          --maxfail=3
      env:
        BASE_URL: http://localhost:8000

  performance-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-asyncio pytest-benchmark
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Run performance tests
      run: |
        pytest src/backend/tests/unit/test_performance_scenarios.py \
          --benchmark-only \
          --benchmark-json=benchmark-results.json \
          --tb=short \
          -v

  test-summary:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, api-tests, security-tests, e2e-tests]
    if: always()
    
    steps:
    - name: Test Results Summary
      run: |
        echo "# Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Unit Tests | ${{ needs.unit-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration Tests | ${{ needs.integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| API Tests | ${{ needs.api-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Tests | ${{ needs.security-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| E2E Tests | ${{ needs.e2e-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.unit-tests.result }}" == "success" && 
              "${{ needs.integration-tests.result }}" == "success" && 
              "${{ needs.api-tests.result }}" == "success" && 
              "${{ needs.security-tests.result }}" == "success" && 
              "${{ needs.e2e-tests.result }}" == "success" ]]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ All test suites passed!" >> $GITHUB_STEP_SUMMARY
          exit 0
        else
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "❌ Some test suites failed. Please check the logs." >> $GITHUB_STEP_SUMMARY
          exit 1
        fi